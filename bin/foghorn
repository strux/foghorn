#!/usr/bin/env ruby
require 'gli'
require 'open3'
require 'rainbow'
require 'foghorn'

include GLI::App
config_file File.join(Dir.pwd, '.foghorn.rc.yaml')

def execute?(command)
  system "#{command} >& /dev/null"
end

def execute(command, desc)
  stdout_str, stderr_str, status = Open3.capture3(command)
  format = "%-40s %s"
  if status.success?
    puts sprintf(format, desc, "PASS".color(:green))
  else
    puts sprintf(format, desc, "FAIL".color(:red))
    STDERR.puts stdout_str
    exit 1
  end
end

def app_root_path
  File.expand_path('../', `git rev-parse --show-cdup`)
end



program_desc 'Keeps you off the rocks when the AppFog rolls in.'

version Foghorn::VERSION

# name (application)
# suffix (unique)
# ignore prefix?(only use name above instead of concat)
# patter? for name
# env vars
# multiple for same flag? ^^

desc 'AppFog email'
flag [:email,:e]

desc 'AppFog password'
flag [:password,:p]

desc 'AppFog email for application'
flag [:application_email,:E]

desc 'AppFog target'
flag [:target,:t]
default_value 'http://proxy.af.mtnsatcloud.com'

desc 'Application basename'
flag [:basename]
default_value File.basename(app_root_path)

desc 'Deploy application to AppFog'
command :deploy do |c|

  c.desc 'Infrastructure to deploy to'
  c.default_value 'mtn'
  c.flag [:infra,:i]

  c.desc 'Environment of this deployment'
  c.long_desc "Used to construct your application's AppFog name and URL"
  c.default_value 'integ'
  c.flag [:environment,:e]
  c.action do |global_options,options,args|

    execute('ls', 'Generating manifest PLACEHOLDER')

    execute('ls', 'Uploading application PLACEHOLDER')

    command = "#{@af_base_command} apps | grep '#{'poseidon'}'"
    if execute?(command)
      command = "#{@af_base_command} stop PLACEHOLDER"
      execute(command, "Stopping application")
      af_command = 'update'
    else
      af_command = 'push'
    end
    puts af_command
    #abort "Could not #{af_command} #{app_name}" unless system "af -u #{AF_USER} -m manifest.yml --path . --runtime ruby193 #{af_command} --no-start"

  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  
  raise ArgumentError, "--email required" unless global[:email]
  raise ArgumentError, "--password required" unless global[:password]

  command = "af login --email #{global[:email]} --password #{global[:password]}"
  execute(command, 'Logging in to AppFog')

  command = "af target #{global[:target]}"
  execute(command, 'Setting AppFog target')

  @af_base_command  = "af"
  @af_base_command += " -u #{global[:application_email]}" if global[:application_email]

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # return false to skip default error handling
  true
end

exit run(ARGV)
